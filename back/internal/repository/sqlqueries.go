package repository

const (
	QTreeComboList               = "SELECT ID, NAME, CREATE_TIME, P_ID, TYPE FROM DATABASE"
	QProxyPresets                = "SELECT ID, NAME, CREATE_TIME FROM PROXY"
	QGetDatabaseType             = "SELECT TYPE FROM DATABASE WHERE ID = $1"
	QGetDatabaseLinks            = "SELECT ID, LINK, LINK_TYPE FROM DATABASE_LINK WHERE DATABASE_ID = $1 AND STATUS = '11'"
	QGetProxyPresetLinks         = "SELECT ID, LINK, LINK_TYPE FROM PROXY_LINK WHERE PROXY_ID = $1 AND LINK_TYPE = 16"
	QGetSessions                 = "SELECT ID, NAME, CREATE_TIME, STATUS FROM SESSION"
	QUpdateDatabaseLinkStatus    = "UPDATE DATABASE_LINK SET STATUS = $1, ERR_TXT = $2 WHERE DATABASE_ID = $3 AND ID = $4"
	QUpdateProxyPresetLinkStatus = "UPDATE PROXY_LINK SET STATUS = $1, ERR_TXT = $2 WHERE PROXY_ID = $3 AND ID = $4"

	QGetMdules = `
		SELECT 
			M.ID, M.NAME, M.CREATE_TIME, M.VERSION, M.AUTHOR, R.NAME data_type	
		FROM MODULE M
		LEFT JOIN REFERENCE R ON M.DATA_TYPE = R.ID
	`

	QGetSessionStartInfo = `
		SELECT 
			S.*,
			(SELECT COUNT(1) FROM SESSION_PROXY SP WHERE SP.SESSION_ID = S.ID) PROX_COUNT 
		FROM SESSION S 
		WHERE S.ID = $1
	`

	QSessionInfo = `
		SELECT 
			S.ID, S.NAME, S.CREATE_TIME, RS.NAME status, 
			COALESCE(D.NAME, 'Не выбрана') database_name,
			IIF(S.PROXY_ID = -2, 'Из файла', COALESCE(P.NAME, 'Без прокси')) proxy_name,
			COALESCE(M.NAME, 'Не выбран' ) module_name,
			COALESCE(S.START_TIME, 'Не начато') start_time, 
			COALESCE(S.FINISH_TIME, 'Не закончено') finish_time,
			S.ERRORS, S.WORKER_COUNT
		FROM SESSION S
		LEFT JOIN REFERENCE RS ON RS.ID = S.STATUS
		LEFT JOIN DATABASE D ON D.ID = S.DATABASE_ID
		LEFT JOIN PROXY P ON P.ID = S.PROXY_ID
		LEFT JOIN MODULE M ON M.ID = S.MODULE_ID
		WHERE S.ID = $1
	`

	QGetSessionStatistic = `
	SELECT 
		sd.data_status id, (SELECT NAME FROM REFERENCE R WHERE R.ID = SD.DATA_STATUS) name, COUNT(1) count 
	FROM SESSION_DATA SD
	WHERE SD.SESSION_ID  = $1
	GROUP BY SD.DATA_STATUS 
	
	UNION ALL
	
	SELECT 27 id, NAME name, VALUE count FROM SESSION_DTL DTL
	WHERE DTL.SESSION_ID = $2 AND KEY = 'R1E'	
	`

	QGetPercent = `
	WITH NUMS AS (		
		SELECT
			(SELECT COUNT(1) FROM database_link_data WHERE database_id = S.DATABASE_ID) combolistcount,
			(SELECT COUNT(1) FROM SESSION_DATA WHERE SESSION_ID = S.ID) passedcount,
			S.STATUS, S.FINISH_TIME
		FROM SESSION S
		WHERE S.ID = $1
	)		
	SELECT 
		N.combolistcount, 
		N.passedcount,
		(N.combolistcount - N.passedcount) lastlines,
		CASE 
			WHEN N.combolistcount > 0 THEN ROUND((N.passedcount * 100.0) / N.combolistcount, 2)||'%'
			ELSE '0%'
		END AS percent,
		R.NAME STATUS_NAME, N.FINISH_TIME
	FROM NUMS	N
	INNER JOIN REFERENCE R ON R.ID = N.STATUS	
	`

	QUpdateDatabase = `
		UPDATE DATABASE 
		SET STATUS = (
			CASE 
				WHEN EXISTS(SELECT 1 FROM DATABASE_LINK WHERE DATABASE_ID = $1 AND STATUS = 13) THEN 13
				WHEN NOT EXISTS(SELECT 1 FROM DATABASE_LINK WHERE DATABASE_ID = $2 AND STATUS IN (11,12,13)) THEN 14
				ELSE 11
			END
		)
		WHERE ID = $3
	`

	QUpdateProxyPreset = `
		UPDATE PROXY
		SET STATUS = (
			CASE
				WHEN EXISTS(SELECT 1 FROM PROXY_LINK WHERE PROXY_ID = $1 AND STATU = 13) THEN 13
				ELSE NOT EXISTS(SELECT 1 FROM PROXY_LINK WHERE PROXY_ID = $2 AND STATUS IN (11,12,13)) THEN 14
			END
		)
		WHERE ID = $3
	`

	QLoginInDataBase = `
		SELECT 
			U.ID USER_ID, U.USERNAME USER_NAME, R.NAME ROLE_NAME 
		FROM USER U
		INNER JOIN REFERENCE R ON U.ROLE_ID = R.ID AND R."GROUP" = 'USER'
		WHERE U.USERNAME = $1 AND U.PASSWORD = $2
	`

	QComboListInfo = `
		SELECT
			D.ID, D.NAME, D.CREATE_TIME, RT.NAME type, RS.NAME status,
			(SELECT COUNT(1) FROM DATABASE_LINK_DATA DLD WHERE DLD.DATABASE_ID = D.ID) lines_count,
			D.P_ID, RD.NAME data_type 
		FROM DATABASE D 
		LEFT JOIN REFERENCE RT ON RT.ID = D.TYPE
		LEFT JOIN REFERENCE RS ON RS.ID = D.STATUS
		LEFT JOIN REFERENCE RD ON RD.ID = D.DATA_TYPE
		WHERE D.ID = $1
	`

	QGetSessionPagesCount = `
		SELECT COUNT(1) C1 FROM (
			SELECT 1 FROM SESSION_DATA SD 
			WHERE SESSION_ID = $1 AND DATA_STATUS IN (-_-)
			UNION ALL
			SELECT 1 FROM SESSION S
			INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = S.DATABASE_ID
			WHERE $2 = 999 AND S.ID = $3 AND NOT EXISTS(SELECT 1 FROM SESSION_DATA WHERE SESSION_ID = S.ID AND DATABASE_CON_ID = DLD.CON_ID)
		) 
	`

	QGetSessionResults = `
		SELECT 
			status, data, log 
		FROM (
			SELECT
				RS.NAME status, DLD.data, SDL.LOG
			FROM SESSION_DATA SD
			LEFT JOIN SESSION_DATA_LOG SDL ON SDL.SESSION_ID = SD.SESSION_ID AND SD.DATABASE_CON_ID = SDL.CON_ID
			INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = SD.DATABASE_ID AND DLD.CON_ID = SD.DATABASE_CON_ID
			INNER JOIN REFERENCE RS ON RS.ID = SD.DATA_STATUS
			WHERE SD.SESSION_ID = $1 AND SD.DATA_STATUS IN (-_-)
		
			UNION ALL
		
			SELECT
				'Остаток' status, DLD.data, null log
			FROM SESSION S
			INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = S.DATABASE_ID
			WHERE $2 = 999 AND S.ID = $3 AND NOT EXISTS(SELECT 1 FROM SESSION_DATA WHERE SESSION_ID = S.ID AND DATABASE_CON_ID = DLD.CON_ID)			
		)
		LIMIT $4 
		OFFSET $5
	`

	QComboListLinksInfo = `
		SELECT 
			DL.ID, RS.NAME status, RL.NAME type,  
			(
				SELECT COUNT(1) FROM DATABASE_LINK_DATA DLD 
				WHERE DLD.DATABASE_ID = DL.DATABASE_ID AND DLD.DATABASE_LINK = DL.ID
			) "count", DL.LINK path, DL.ERR_TXT
		FROM DATABASE_LINK DL
		LEFT JOIN REFERENCE RS ON RS.ID = DL.STATUS 
		LEFT JOIN REFERENCE RL ON RL.ID = DL.LINK_TYPE
		WHERE DL.DATABASE_ID = $1	
	`

	QProxyPresetInfo = `
		SELECT
			P.ID, P.NAME, P.CREATE_TIME, P.USE_UPDATE, P.INTERVAL, P.TIMEOUT,
			(SELECT COUNT(1) FROM PROXY_LINK_DATA PLD WHERE PLD.PROXY_ID = P.ID) lines_count
		FROM PROXY P WHERE P.ID = $1	
	`

	QProxyPresetLinksInfo = `
		SELECT
			PL.ID, RS.NAME status, RL.NAME source_type, RP.NAME proxy_type, 
			(
				SELECT COUNT(1) FROM PROXY_LINK_DATA PLD
				WHERE PLD.PROXY_ID = PL.PROXY_ID AND PLD.PROXY_LINK = PL.ID
			) "count",
			PL.LINK path, PL.ERR_TXT
		FROM PROXY_LINK PL
		LEFT JOIN REFERENCE RS ON RS.ID = PL.STATUS
		LEFT JOIN REFERENCE RL ON RL.ID = PL.LINK_TYPE
		LEFT JOIN REFERENCE RP ON RP.ID = PL.PROXY_TYPE
		WHERE PL.PROXY_ID = $1
	`

	QInsertDatabase = `
		INSERT INTO DATABASE(NAME, P_ID, TYPE, DATA_TYPE, STATUS)
		VALUES($1, $2, $3, $4, $5);
	`

	QInsertDatabaseLink = `
		INSERT INTO DATABASE_LINK(DATABASE_ID, ID, LINK, STATUS, LINK_TYPE)
		VALUES($1, $2, $3, $4, $5);
	`

	QInsertProxy = `
		INSERT INTO PROXY(NAME, INTERVAL, TIMEOUT, USE_UPDATE)
		VALUES($1, $2, $3, $4);
	`

	QInsertProxyLink = `
		INSERT INTO PROXY_LINK(PROXY_ID, ID, LINK_TYPE, PROXY_TYPE, LINK, STATUS)
		VALUES($1, $2, $3, $4, $5, 12);
	`

	QInsertDatabaseLinkData = `
		INSERT INTO DATABASE_LINK_DATA(DATABASE_ID, DATABASE_LINK, ID, DATA, CON_ID)
		VALUES($1, $2, $3, $4, $5);
	`

	QInsertProxyPresetLinkData = `
		INSERT INTO PROXY_LINK_DATA(PROXY_ID, PROXY_LINK, ID, HOST, PORT)
		VALUES($1, $2, $3, $4, $5);
	`

	QInsertSession = `
		INSERT INTO SESSION(NAME, STATUS, WORKER_COUNT)
		VALUES($1, 11, 100);
	`

	QisAbleToDelete = `
		SELECT 
			CASE 
				WHEN EXISTS(SELECT 1 FROM DATABASE D WHERE D.P_ID = $1) THEN 1
				WHEN EXISTS(SELECT 1 FROM SESSION  S WHERE S.DATABASE_ID = $2) THEN 2
				ELSE 0
			END isAble;
	`

	QDeleteComboList = `
		DELETE FROM DATABASE_LINK_DATA WHERE DATABASE_ID = $1;
		DELETE FROM DATABASE_LINK WHERE DATABASE_ID = $2;
		DELETE FROM DATABASE WHERE ID = $3;
	`

	QDeleteProxyPreset = `
		DELETE FROM PROXY_LINK_DATA WHERE PROXY_ID = $1;
		DELETE FROM PROXY_LINK WHERE PROXY_ID = $2;
		DELETE FROM PROXY WHERE ID = $3;
	`

	QDeleteSession = `
		DELETE FROM SESSION WHERE ID = $1;
	`

	QInsertSessionProxy = `
		INSERT INTO SESSION_PROXY(SESSION_ID, HOST, PORT, TYPE)
		VALUES($1, $2, $3, $4);
	`
	QInsertSessionDTLTimeOut = `
		INSERT INTO SESSION_DTL(SESSION_ID, KEY, VALUE, NAME)
		VALUES($1, $2, $3, $4);
	`

	QInsertModule = `
		INSERT INTO MODULE(NAME, VERSION, AUTHOR, DATA_TYPE, PATH)
		VALUES($1, $2, $3, $4, $5);
	`

	QueryALL = `
	SELECT 
		coalesce(status,'') st, coalesce(data,'') da, coalesce(log, '') lo
	FROM (
		SELECT
			RS.NAME status, DLD.data, SDL.LOG
		FROM SESSION_DATA SD
		LEFT JOIN SESSION_DATA_LOG SDL ON SDL.SESSION_ID = SD.SESSION_ID AND SD.DATABASE_CON_ID = SDL.CON_ID
		INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = SD.DATABASE_ID AND DLD.CON_ID = SD.DATABASE_CON_ID
		INNER JOIN REFERENCE RS ON RS.ID = SD.DATA_STATUS
		WHERE SD.SESSION_ID = $1
	
		UNION ALL
	
		SELECT
			'Остаток' status, DLD.data, null log
		FROM SESSION S
		INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = S.DATABASE_ID
		WHERE S.ID = $2 AND NOT EXISTS(SELECT 1 FROM SESSION_DATA WHERE SESSION_ID = S.ID AND DATABASE_CON_ID = DLD.CON_ID)			
	)
	`

	QuerySelected = `
	SELECT 
		coalesce(status,'') st, coalesce(data,'') da, coalesce(log, '') lo
	FROM (
		SELECT
			RS.NAME status, DLD.data, SDL.LOG
		FROM SESSION_DATA SD
		LEFT JOIN SESSION_DATA_LOG SDL ON SDL.SESSION_ID = SD.SESSION_ID AND SD.DATABASE_CON_ID = SDL.CON_ID
		INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = SD.DATABASE_ID AND DLD.CON_ID = SD.DATABASE_CON_ID
		INNER JOIN REFERENCE RS ON RS.ID = SD.DATA_STATUS
		WHERE SD.SESSION_ID = $1 and SD.DATA_STATUS IN (-_-)
	
		UNION ALL
	
		SELECT
			'Остаток' status, DLD.data, null log
		FROM SESSION S
		INNER JOIN DATABASE_LINK_DATA DLD ON DLD.DATABASE_ID = S.DATABASE_ID
		WHERE $2 = 999 and S.ID = $3 AND NOT EXISTS(SELECT 1 FROM SESSION_DATA WHERE SESSION_ID = S.ID AND DATABASE_CON_ID = DLD.CON_ID)			
	)
	`
)
